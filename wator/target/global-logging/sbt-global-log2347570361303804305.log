[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\hicham\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\hicham\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Oracle Corporation Java 17.0.2)
[debug]       Load.loadUnit: plugins took 320.7645ms
[debug]       Load.loadUnit: defsScala took 0.5644ms
[debug] [Loading] Scanning directory C:\Users\hicham\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\hicham\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 47.4233 ms
[debug]           Load.resolveProject(global-plugins) took 110.1496ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\hicham\.sbt\1.0\plugins, plugins: List(<none>))) took 206.8708ms
[debug] [Loading] Done in C:\Users\hicham\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 267.3871ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.7375ms
[debug]     Load.loadUnit(file:/C:/Users/hicham/.sbt/1.0/plugins/, ...) took 615.5746ms
[debug]   Load.apply: load took 4871.0109ms
[debug]   Load.apply: resolveProjects took 140.2119ms
[debug]   Load.apply: finalTransforms took 1145.2515ms
[debug]   Load.apply: config.delegates took 27.0354ms
[debug]   Load.apply: Def.make(settings)... took 1470.5421ms
[debug]   Load.apply: structureIndex took 239.9452ms
[debug]   Load.apply: mkStreams took 6.0503ms
[info] loading global plugins from C:\Users\hicham\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 18739.4483ms
[debug]           Load.loadUnit: plugins took 53.3453ms
[debug]           Load.loadUnit: defsScala took 0.0138ms
[debug] [Loading] Scanning directory C:\Users\hicham\Desktop\scalaGit\projets-pf-scala-hicham-harra\wator\project
[debug]             Load.loadUnit: mkEval took 11.3852ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\hicham\Desktop\scalaGit\projets-pf-scala-hicham-harra\wator\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 6.317 ms
[info] loading settings for project wator-build from idea1.sbt ...
[debug]               Load.resolveProject(wator-build) took 17.3237ms
[debug]             Load.loadTransitive: finalizeProject(Project(id wator-build, base: C:\Users\hicham\Desktop\scalaGit\projets-pf-scala-hicham-harra\wator\project, plugins: List(<none>))) took 25.3198ms
[debug] [Loading] Done in C:\Users\hicham\Desktop\scalaGit\projets-pf-scala-hicham-harra\wator\project, returning: (wator-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 20491.0345ms
[debug]           Load.loadUnit: cleanEvalClasses took 23.2698ms
[debug]         Load.loadUnit(file:/C:/Users/hicham/Desktop/scalaGit/projets-pf-scala-hicham-harra/wator/project/, ...) took 20569.994ms
[debug]       Load.apply: load took 20591.7271ms
[debug]       Load.apply: resolveProjects took 0.2856ms
[debug]       Load.apply: finalTransforms took 30.4527ms
[debug]       Load.apply: config.delegates took 0.998ms
[debug]       Load.apply: Def.make(settings)... took 537.6788ms
[debug]       Load.apply: structureIndex took 186.7869ms
[debug]       Load.apply: mkStreams took 0.0051ms
[info] loading project definition from C:\Users\hicham\Desktop\scalaGit\projets-pf-scala-hicham-harra\wator\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 22329.6739ms
[debug]     Load.loadUnit: defsScala took 0.0102ms
[debug] [Loading] Scanning directory C:\Users\hicham\Desktop\scalaGit\projets-pf-scala-hicham-harra\wator
[debug]       Load.loadUnit: mkEval took 0.5826ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 262.1675 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 1379.1922ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\hicham\Desktop\scalaGit\projets-pf-scala-hicham-harra\wator, plugins: List(<none>))) took 1668.2686ms
[debug] [Loading] Done in C:\Users\hicham\Desktop\scalaGit\projets-pf-scala-hicham-harra\wator, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 19478.4339ms
[debug]     Load.loadUnit: cleanEvalClasses took 61.004ms
[debug]   Load.loadUnit(file:/C:/Users/hicham/Desktop/scalaGit/projets-pf-scala-hicham-harra/wator/, ...) took 41872.4434ms
[debug] Load.apply: load took 41878.5251ms
[debug] Load.apply: resolveProjects took 0.1907ms
[debug] Load.apply: finalTransforms took 159.5681ms
[debug] Load.apply: config.delegates took 0.4772ms
[debug] Load.apply: Def.make(settings)... took 703.3291ms
[debug] Load.apply: structureIndex took 175.3874ms
[debug] Load.apply: mkStreams took 0.0035ms
[info] set current project to projet1 (in build file:/C:/Users/hicham/Desktop/scalaGit/projets-pf-scala-hicham-harra/wator/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 49974 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 49974, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to projet1 (in build file:/C:/Users/hicham/Desktop/scalaGit/projets-pf-scala-hicham-harra/wator/)
[debug] > Exec(idea-shell, None, None)
